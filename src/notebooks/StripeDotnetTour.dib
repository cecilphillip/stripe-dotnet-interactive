#!markdown

## Stripe.NET Interactive Notebook

[Stripe](https://stripe.com) provides services to enable developers with the ability to integrate payment processing into their solutions in a secure and reliable way. For .NET Developers, the [Stripe.NET](https://www.nuget.org/packages/Stripe.net/) is the official supported client library for interacting with Stripe's APIs.

In this interative notebook, we see how to get started with Stripe.NET and explore some of the built-in functionality for calling into Stripe's APIs.

#!markdown

### Setup your Stripe Account

Before we get started with Stripe.NET, you'll need to [register](https://dashboard.stripe.com/register) for a free Stripe account. You'll at least need to provide a company name and country. For this exploration, activing your Stripe account will not be necessary and it should be in `test mode` the entire time. Until you're ready to process real payments, adding real banking inforation to your Stripe account will not be required either.

You can find the toggle for `test mode` on the upper right side of the Stripe Dashboard.

<img src="../../assets/images/TestMode.png" height="175" width="600" alt="Test Mode Toggle" />

#!markdown

### Intall the NuGet package
First, you'll need to install Stripe.NET in your project. With in a typical .NET project, you can use the dotnet CLI by running the following command:

```shell
> dotnet add package Stripe.net
```

Since we're in this lovely notebook, we'll use the `#r` directive
```
#r "nuget:Stripe.NET"
```

#!csharp

// Install Stripe.NET
#r "nuget:Stripe.NET"

// Install Bogus for generating fake data
#r "nuget:Bogus"

#!csharp

// Include usings
using System.Linq;
using System.Runtime.Serialization;
using Stripe;
using Bogus;

using Microsoft.DotNet.Interactive.Formatting;
using Microsoft.DotNet.Interactive.Formatting.TabularData;

#!markdown

### Authenticating Stripe API Requests
The Stripe uses API keys to authenticate requests to its API. The keys for your account can be managed in your Stripe Dashboard. Click on `Developers` in the upper right corner of the dashboard then choose `API Keys` in the left menu. You will be presented with a `Publishable` key and a `Secret` key that can be used in test mode only. Test mode secret keys have the prefix `sk_test_` and live mode secret keys have the prefix `sk_live_`. You can learn more about API keys in the Stripe [documentation](https://stripe.com/docs/keys#limiting-access-with-restricted-api-keys).

To use your secret key for each request, assign it to StripeConfiguration.ApiKey and the .NET library will automatically include it in the request header.

```csharp
StripeConfiguration.ApiKey = "";
```

#!csharp

// Assign your Stripe account's secret key globally to make use of it in every request
StripeConfiguration.ApiKey = "";

#!markdown

## Products in Stripe
[Products](https://stripe.com/docs/api/products) in Stripe represent specific offerings for your customers. For every variation of an item or service, a distinct product should be created in Stripe. Each product will be used in along with one or more [Prices](https://stripe.com/docs/api/prices) to configure pricing to be in Payment Links, Checkout, or Subscriptions.

In Stripe.NET, the `ProductService` will be used to manage the products in a Stripe account.

#!markdown

### Creating Products
To create a product a Product in Stripe, you will pass an instance of `ProductCreateOptions` to the `Create` method of `ProductService`.

```csharp
var options = new ProductCreateOptions
{
  Name = "Playstation 5",
};
var service = new ProductService();
service.Create(options);
```

#!csharp

// Generate Fake product data
public record Product(string UniqueCode, string Name, string Description, string ImageUrl, decimal Price);

public class ProductRecordFaker : Faker<Product>
{
   public ProductRecordFaker()
   {
      this.CustomInstantiator(_ => FormatterServices.GetUninitializedObject(typeof(Product)) as Product);
      RuleFor(p => p.UniqueCode, f => f.Random.AlphaNumeric(7).ToUpper());
      RuleFor(p => p.Name, f => f.Commerce.ProductName());
      RuleFor(p => p.Description, f => $"This is such an awesome product made out of {f.Commerce.ProductMaterial()}");
      RuleFor(p => p.ImageUrl, f => f.Image.PicsumUrl());
      RuleFor(p => p.Price, f => Decimal.Parse(f.Commerce.Price(min:15, max:200)));
   }
}

var productFaker = new ProductRecordFaker();
var products = productFaker.Generate(10);

#!csharp

products.ToTabularDataResource().Display();

#!csharp

// Create products using the generated fake data
foreach(var product in products) {
    
    var options = new ProductCreateOptions
    {
        Name = product.Name,
        Description = product.Description,
        Images = new List<string>{ product.ImageUrl},
        Shippable = true,
        Metadata = new Dictionary <string, string>{
            ["code"] = product.UniqueCode
        }
    };
    
    var service = new ProductService();
    await service.CreateAsync(options);
}

#!markdown

### Retrieving Products
Using the `List` method of `ProductService` to return the available Products in the Stripe account. An instance of `ProductListOptions` is required to specify the query opptions.

```csharp
var options = new ProductListOptions
{
  Limit = 3,
};
var service = new ProductService();
StripeList<Product> products = service.List(options);
```

The `List` method returns an instance of `StripeList` which has built in support for paging. The `HasMore` property on the list can be checked to know if more data remains.

#!csharp

var options = new ProductListOptions
{
  Limit = 3,
  Active = true
};
var service = new ProductService();

StripeList<Stripe.Product> productResults = await service.ListAsync(options);

if(productResults.Any()) 
{
  while(true) 
  {
    // Print current batch
    foreach(var product in productResults) {
      Console.WriteLine($"{product.Name} => {product.Id}");
    }

    if(!productResults.HasMore) break;

    options.StartingAfter = productResults.Data.Last().Id;
    productResults =  await service.ListAsync(options);
  }  
}

#!markdown

### Retrieving a Product by Id
When you want to retrieve a single product, you can use the `Get` method on `ProductService`. You'll have to provide it with the id for the product that was generated by Stripe.

#!csharp

// we'll use the last product id from previous cell
var stripeProductId = productResults.Data.Last().Id;
Console.WriteLine($"Getting Product => {stripeProductId}");
var service = new ProductService();
var retrievedProduct = await service.GetAsync(stripeProductId);
retrievedProduct.ToJson()

#!markdown

## Working with Prices
The Products we've added to the Stripe account thus far don't have any price data attached to them. Remember, every Stripe Product represents a single offering of that product. Every version, SKU, model, size, version of your product needs to be created as a unique Product in Stripe with a unique price per currency.

**Prices** ins Stripes define the unit cost, currency, and billing interval for product purchases. Stripe Products help you track inventory, and Stripe Prices help you track payment terms. If there are different types of physical goods or levels of service, they should be represented by unique Products with their associated pricing per currency.

> **IMPORTANT** The `UnitAmount` and `UnitAmountDecimal` properties on a Price represent the amount cents to charge. If the price of a product is 10 dollars and 50 cents, the `UnitAmount` should be set to **1050**.

We'll use the `PriceService` from Stripe.NET to create Prices in our Stripe account and associate them with existing Products.

```csharp
var options = new PriceCreateOptions
{
  UnitAmount = 2000,
  Currency = "usd",  
  Product = "prod_123455",
};
var service = new PriceService();
service.Create(options);
```

#!csharp

var productService = new ProductService();
var options = new ProductListOptions {
    Limit= 5
};

await foreach(var p in  productService.ListAutoPagingAsync(options)) {
    var price = products.FirstOrDefault(prod => prod.UniqueCode == p.Metadata["code"])?.Price;
        
    if(price is not null) {
        Console.WriteLine($"Setting price of {p.Metadata["code"]} to {price.Value}");
        var priceOptions = new PriceCreateOptions
        {
            UnitAmountDecimal = price.Value * 100,
            Currency = "usd",           
            Product = p.Id,
        };
        var priceService = new PriceService();
        priceService.Create(priceOptions);
    }
}

#!markdown

### Creating a Price and Product together
What if you wanted to create a price and the associated product at the same time? The `PriceCreateOptions` has a `ProductData` property that allows you to set *some* Product properties.

#!csharp

// Let's generate a new product, but instead we'll create the price and the product using the PriceService
var newFakeProduct = productFaker.Generate(1).Single();
var priceLookupKey = "fakeProductKey";

var priceOptions = new PriceCreateOptions
{
    UnitAmountDecimal = newFakeProduct.Price * 100,
    Currency = "usd",
    LookupKey = priceLookupKey,
    ProductData = new(){
        Name = newFakeProduct.Name,
        Metadata = new Dictionary <string, string>{
            ["code"] = newFakeProduct.UniqueCode
        }
        //TODO: How do I add a description, images
    }
};

var priceService = new PriceService();
var newPrice = await priceService.CreateAsync(priceOptions);

#!csharp

newPrice.ToJson()

#!markdown

### Querying for Prices
The `List` method on the `PriceService` accepts an instance of `PriceListOptions` that controls the query options. Queries can be tuned by Product Id, Lookup keys, currency, creation date and other options. 

#!csharp

// Look up prices using the Price lookup key
var priceListOptions = new PriceListOptions 
{ 
    LookupKeys = new List<string>{ priceLookupKey}
};
var service = new PriceService();
StripeList<Price> prices = service.List(priceListOptions);
var fakeProductPrice = prices.Data.SingleOrDefault();
fakeProductPrice.ToJson()

#!csharp

// Look up prices the product id
var priceListOptions = new PriceListOptions 
{ 
    Product = productResults.Data.Last().Id
};
var service = new PriceService();
StripeList<Price> prices = service.List(priceListOptions);
var fakeProductPrice = prices.Data.SingleOrDefault();
fakeProductPrice.ToJson()

#!csharp

// Update generated product with description and image

var prodUpdate = new ProductUpdateOptions() {
    Description = newFakeProduct.Description,
    Shippable = true,
    Images = new List<string> {newFakeProduct.ImageUrl}
};
var productService = new ProductService();

var updatedProduct = await productService.UpdateAsync(fakeProductPrice.ProductId, prodUpdate);
updatedProduct.ToJson()

#!markdown

## Collecting payments with Payment Links
Now that the Stripe account has products and prices setup, the next set is to start collecting payments. One of the easiest ways to do that is with [Payment Links](https://stripe.com/payments/payment-links). With Payment Links,  you can quickly can create a payment page through the Stripe [Dashboard](https://stripe.com/docs/payments/payment-links#create-link) and share a link to it through any channel you wish. It requires no coding but they can also be created programmatically using the Payment Links API. That's what we'll do next.

Stripe.NET provides the `PaymentLinkService` class to help manage Payment Links through code.

#!csharp

// Create a payment from existing prices 
var priceListOptions = new PriceListOptions { Limit = 3 };

var lineItems = new List<PaymentLinkLineItemOptions>();
var priceService = new PriceService();

foreach(var p in await priceService.ListAsync(priceListOptions)) {
      lineItems.Add(new(){ Price = p.Id, Quantity = 1 });      
}

var plOptions = new PaymentLinkCreateOptions
{
  LineItems = lineItems,  // max 20 line items
  PaymentMethodTypes = new List<string> { "card" }, // only card is supported today 
  AllowPromotionCodes = true,
  BillingAddressCollection = "required",
  ShippingAddressCollection = new() {
    AllowedCountries = new List<string> { "US", "CA", "MX"} //https://www.iban.com/country-codes https://stripe.com/global
  }
};

var plService = new PaymentLinkService();
var newPaymentLink = await plService.CreateAsync(plOptions);

newPaymentLink.Url

#!markdown

## Using Payment Elements
If there's a need to create a customized user experince for payment collection [Stripe Elements](https://stripe.com/payments/elements) provides a collection of prebuilt UI components for building your web checkout workflow. Stripe Elements is a feature of the [Stripe.js](https://stripe.com/docs/js), a browerside library for securely collect sensitive payment details and interacting with Stripe's APIs.

Stripe.js can loaded directly via a html script tag:
```html
 <script src="https://js.stripe.com/v3/"></script>
```
or via NPM

```shell
npm install @stripe/stripe-js
```

Before using Stripe Elements to collect payment, a [Payment Intent](https://stripe.com/docs/api/payment_intents) needs to be created in the backened then its associated client secret has to be provided to the frontend.
> A **PaymentIntent** tracks the customer’s payment lifecycle, keeping track of any failed payment attempts and ensuring the customer is only charged once.

#!csharp

var options = new PaymentIntentCreateOptions
{
  Amount = 2000,
  Currency = "usd",
  PaymentMethodTypes = new List<string>
  {
    "card",
  },
};
var service = new PaymentIntentService();
var newPaymentIntent = await service.CreateAsync(options);

#!markdown

If you wish the iterate through the available payment intents on the current Stripe account, the `PaymentIntentService` has a `List` method just for that.

#!csharp

var piListOptions = new PaymentIntentListOptions
{
  Limit = 3,
};
var service = new PaymentIntentService();
StripeList<PaymentIntent> paymentIntents = service.List(piListOptions);

if(paymentIntents.Any()) 
{
  while(true) 
  {
    // Print current batch
    foreach(var pi in paymentIntents) {
      Console.WriteLine($"{pi.Id} => {pi.Amount} => {pi.Status}");
    }

    if(!paymentIntents.HasMore) break;

    piListOptions.StartingAfter = paymentIntents.Data.Last().Id;
    paymentIntents =  await service.ListAsync(piListOptions);
  }  
}

#!csharp

var clientSecret = newPaymentIntent.ClientSecret;
$"Id => {newPaymentIntent.Id} Secret => {newPaymentIntent.ClientSecret}"

#!markdown

In the HTML of the checkout page, initialize the `Stripe` object with the [publishable key](https://stripe.com/docs/keys#obtain-api-keys) then create an [elements intance](https://stripe.com/docs/js/elements_object/create) using the client secret from the Payment Intent. After the element is created, it can be mounted to the respective HTML dom element.

```javascript
const paymentElement = elements.create("payment", {
    business: {
        name: "Llama Luxury"
    }
});
paymentElement.mount("#payment-element");
```

#!html

#!html
<script src="https://js.stripe.com/v3/"></script>
<section id="payment-form">
    <div id="payment-element"></div>
    <button id="btnsubmit" type="submit">        
        <span id="button-text">Pay now</span>
    </button>    
</section>
<br /> <hr />
<span id="results">Results Placeholder</span>

#!js
#!share --from csharp clientSecret

const stripe = Stripe("<Your Publishable Key>");
elements = stripe.elements({ clientSecret });

const paymentElement = elements.create("payment", {
    business: {
        name: "Llama Luxury"
    }
});
paymentElement.mount("#payment-element");

var resultsSpan = document.querySelector("#results");

document.querySelector("#btnsubmit")
    .addEventListener("click", handleSubmit);

async function handleSubmit(e) {  
  e.preventDefault();
  resultsSpan.textContent = "running";
  
  try {
    const paymentResult = await stripe.confirmPayment({
      elements,
      redirect: 'if_required',      
    });
    
    // Handle result.error or result.paymentIntent
    if(results.error)
      resultsSpan.textContent = result.error.message;
    
      resultsSpan.textContent = paymentResult.paymentIntent.status;
  } catch(error) {
    resultsSpan.textContent = JSON.stringify(error);    
  }
}
